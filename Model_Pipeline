{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12916977,"sourceType":"datasetVersion","datasetId":8173329}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Step 1: Install Required Libraries\n\nprint(\"Installing Hugging Face Transformers and other required libraries...\")\n# We need sentencepiece for the tokenizer and difflib for evaluation\n!pip install -q transformers torch sentencepiece pillow\n\nimport torch\nfrom transformers import DonutProcessor, VisionEncoderDecoderModel, pipeline\nfrom PIL import Image\nimport os\nimport json\nfrom difflib import SequenceMatcher # To compare the OCR output with ground truth\nimport numpy as np # Import numpy to handle special data types\nimport re\n\nprint(\"Installation and imports complete.\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-30T12:06:31.586144Z","iopub.execute_input":"2025-08-30T12:06:31.586792Z","iopub.status.idle":"2025-08-30T12:06:34.783172Z","shell.execute_reply.started":"2025-08-30T12:06:31.586768Z","shell.execute_reply":"2025-08-30T12:06:34.782247Z"}},"outputs":[{"name":"stdout","text":"Installing Hugging Face Transformers and other required libraries...\nInstallation and imports complete.\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Step 2: Define the Local OCR (Reader) Function\n\ntry:\n    print(\"Loading Local OCR Model (Naver-Clova Donut)...\")\n    ocr_processor = DonutProcessor.from_pretrained('naver-clova-ix/donut-base-finetuned-cord-v2')\n    ocr_model = VisionEncoderDecoderModel.from_pretrained('naver-clova-ix/donut-base-finetuned-cord-v2')\n    print(\"OCR Model loaded successfully.\")\nexcept Exception as e:\n    print(f\"Error loading OCR model: {e}\")\n    ocr_model = None\n\ndef run_local_ocr(image_path):\n    \"\"\"\n    Takes an image path, runs it through a local Donut model, and returns the transcribed text.\n    \"\"\"\n    if not ocr_model:\n        return \"OCR Model not loaded. Cannot process image.\"\n        \n    try:\n        image = Image.open(image_path).convert(\"RGB\")\n        \n        # Prepare image for model\n        pixel_values = ocr_processor(image, return_tensors=\"pt\").pixel_values\n        \n        # Prepare decoder inputs\n        task_prompt = \"<s_cord-v2>\"\n        decoder_input_ids = ocr_processor.tokenizer(task_prompt, add_special_tokens=False, return_tensors=\"pt\").input_ids\n        \n        # Move model and inputs to GPU if available\n        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n        ocr_model.to(device)\n        pixel_values = pixel_values.to(device)\n        decoder_input_ids = decoder_input_ids.to(device)\n\n        # Generate output\n        outputs = ocr_model.generate(\n            pixel_values,\n            decoder_input_ids=decoder_input_ids,\n            max_length=ocr_model.decoder.config.max_position_embeddings,\n            pad_token_id=ocr_processor.tokenizer.pad_token_id,\n            eos_token_id=ocr_processor.tokenizer.eos_token_id,\n            use_cache=True,\n            num_beams=1,\n            bad_words_ids=[[ocr_processor.tokenizer.unk_token_id]],\n            return_dict_in_generate=True,\n        )\n\n        # Decode the output sequence\n        sequence = ocr_processor.batch_decode(outputs.sequences)[0]\n        \n        # --- NEW: More Robust Cleanup Logic ---\n        # This regex finds all text content between the XML-like tags.\n        # It handles the messy, structured output from the Donut model.\n        text_snippets = re.findall(r'>([^<]+)<', sequence)\n        \n        # Join the snippets together to form the clean text\n        clean_text = \" \".join([snippet.strip() for snippet in text_snippets])\n        \n        return clean_text\n\n    except Exception as e:\n        return f\"Error during OCR processing: {e}\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T12:14:39.618319Z","iopub.execute_input":"2025-08-30T12:14:39.618942Z","iopub.status.idle":"2025-08-30T12:14:42.617820Z","shell.execute_reply.started":"2025-08-30T12:14:39.618919Z","shell.execute_reply":"2025-08-30T12:14:42.617076Z"}},"outputs":[{"name":"stdout","text":"Loading Local OCR Model (Naver-Clova Donut)...\nOCR Model loaded successfully.\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# Step 3: Define the Local NER (Analyst) Function\n\ntry:\n    print(\"Loading Local NER Model (Biomedical NER)...\")\n    ner_pipeline = pipeline(\"token-classification\", model=\"d4data/biomedical-ner-all\", aggregation_strategy=\"simple\")\n    print(\"NER Model loaded successfully.\")\nexcept Exception as e:\n    print(f\"Error loading NER model: {e}\")\n    ner_pipeline = None\n\ndef run_local_ner(text):\n    \"\"\"\n    Takes transcribed text, runs it through a local Biomedical NER model,\n    and returns a structured list of entities.\n    \"\"\"\n    if not ner_pipeline:\n        return {\"error\": \"NER Model not loaded.\"}\n        \n    try:\n        ner_results = ner_pipeline(text)\n        return ner_results\n    except Exception as e:\n        return {\"error\": f\"Error during NER processing: {e}\"}\n\n# --- FIX: Creating a robust JSON serializer to prevent crashes ---\nclass NpEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, np.integer):\n            return int(obj)\n        if isinstance(obj, np.floating):\n            return float(obj)\n        if isinstance(obj, np.ndarray):\n            return obj.tolist()\n        return super(NpEncoder, self).default(obj)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T12:17:05.144094Z","iopub.execute_input":"2025-08-30T12:17:05.144661Z","iopub.status.idle":"2025-08-30T12:17:05.474147Z","shell.execute_reply.started":"2025-08-30T12:17:05.144638Z","shell.execute_reply":"2025-08-30T12:17:05.473409Z"}},"outputs":[{"name":"stdout","text":"Loading Local NER Model (Biomedical NER)...\n","output_type":"stream"},{"name":"stderr","text":"Device set to use cuda:0\n","output_type":"stream"},{"name":"stdout","text":"NER Model loaded successfully.\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# Step 4: Run the Full Pipeline & Evaluate\n\n\nif __name__ == \"__main__\":\n    # --- 1. SET YOUR IMAGE PATH ---\n    TEST_IMAGE_PATH = \"/kaggle/input/prescription-data-set/Prescription.jpg\"\n\n    # --- 2. PASTE YOUR GROUND TRUTH TEXT HERE ---\n    GROUND_TRUTH_TEXT = \"T. Doxycycline 100mg BD (6) T. Dolo 650mg BD (6) T. Rantac OD (3) T. Cetirizine OD (5) T. Vit C (5)\"\n\n    if not os.path.exists(TEST_IMAGE_PATH):\n        print(f\"\\nERROR: Test image not found at '{TEST_IMAGE_PATH}'\")\n        print(\"Please upload your prescription image and update the path in the script.\")\n    else:\n        print(\"\\n\" + \"=\"*50)\n        print(\"         STARTING LOCAL TRANSFORMER PIPELINE\")\n        print(\"=\"*50)\n\n        # Stage 1: Run the Local Reader (OCR)\n        print(f\"\\n[Stage 1] Reading text from image: {os.path.basename(TEST_IMAGE_PATH)}\")\n        transcribed_text = run_local_ocr(TEST_IMAGE_PATH)\n        print(f\"--> Model's Transcription: {transcribed_text}\")\n\n        # Stage 2: Run the Local Analyst (NER)\n        print(\"\\n[Stage 2] Analyzing text to find medical entities...\")\n        structured_data = run_local_ner(transcribed_text)\n        \n        print(\"\\n\" + \"=\"*50)\n        print(\"         PIPELINE COMPLETE - STRUCTURED DATA\")\n        print(\"=\"*50)\n        # We now use our custom encoder (cls=NpEncoder) to print safely\n        print(json.dumps(structured_data, indent=2, cls=NpEncoder))\n        \n        # --- Stage 3: Evaluation ---\n        print(\"\\n\" + \"=\"*50)\n        print(\"         EVALUATION vs. GROUND TRUTH\")\n        print(\"=\"*50)\n        \n        print(\"\\n--- OCR Performance ---\")\n        print(f\"Model Output: {transcribed_text}\")\n        print(f\"Ground Truth: {GROUND_TRUTH_TEXT}\")\n        \n        similarity = SequenceMatcher(None, transcribed_text.lower(), GROUND_TRUTH_TEXT.lower()).ratio()\n        print(f\"\\n--> Text Similarity Score: {similarity:.2%}\")\n        \n        print(\"\\n--- NER Performance ---\")\n        print(\"Below are the entities the model found. Compare them to what you expected from the ground truth.\")\n        print(json.dumps(structured_data, indent=2, cls=NpEncoder))\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-30T12:17:10.118899Z","iopub.execute_input":"2025-08-30T12:17:10.119462Z","iopub.status.idle":"2025-08-30T12:17:11.562935Z","shell.execute_reply.started":"2025-08-30T12:17:10.119438Z","shell.execute_reply":"2025-08-30T12:17:11.562154Z"}},"outputs":[{"name":"stdout","text":"\n==================================================\n         STARTING LOCAL TRANSFORMER PIPELINE\n==================================================\n\n[Stage 1] Reading text from image: Prescription.jpg\n--> Model's Transcription: NATIONAL INSTITUTE OF TECHNOLOGY ANDHRA PRADESH - TA DEPALLIGUDEM-534101 MOTHER THERESA HEALTH CENTER 188/25 2 2 Name digyaTokot, Date : 12 108/25 Age: Sex: M BP Iso F SPO2 2 M A E N % cough, Pero 3 PGM Poxycyeline T. loory 6song 3 BD6 003 6 5 5\n\n[Stage 2] Analyzing text to find medical entities...\n\n==================================================\n         PIPELINE COMPLETE - STRUCTURED DATA\n==================================================\n[\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.8080636262893677,\n    \"word\": \"national institute of technology\",\n    \"start\": 0,\n    \"end\": 32\n  },\n  {\n    \"entity_group\": \"Nonbiological_location\",\n    \"score\": 0.7293844223022461,\n    \"word\": \"andhra pradesh\",\n    \"start\": 33,\n    \"end\": 47\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.931725800037384,\n    \"word\": \"ta\",\n    \"start\": 50,\n    \"end\": 52\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.8566929697990417,\n    \"word\": \"de\",\n    \"start\": 53,\n    \"end\": 55\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.5049527883529663,\n    \"word\": \"##palligudem\",\n    \"start\": 55,\n    \"end\": 65\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9682647585868835,\n    \"word\": \"534101\",\n    \"start\": 66,\n    \"end\": 72\n  },\n  {\n    \"entity_group\": \"Nonbiological_location\",\n    \"score\": 0.9847940802574158,\n    \"word\": \"mother theresa health center\",\n    \"start\": 73,\n    \"end\": 101\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9449025988578796,\n    \"word\": \"188 / 25\",\n    \"start\": 102,\n    \"end\": 108\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.868102490901947,\n    \"word\": \"2\",\n    \"start\": 109,\n    \"end\": 110\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.7266038060188293,\n    \"word\": \"2\",\n    \"start\": 111,\n    \"end\": 112\n  },\n  {\n    \"entity_group\": \"Date\",\n    \"score\": 0.8544389009475708,\n    \"word\": \"12 108 / 25 age\",\n    \"start\": 137,\n    \"end\": 150\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9980890154838562,\n    \"word\": \"sex\",\n    \"start\": 152,\n    \"end\": 155\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.6652319431304932,\n    \"word\": \"m\",\n    \"start\": 157,\n    \"end\": 158\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9999182224273682,\n    \"word\": \"bp\",\n    \"start\": 159,\n    \"end\": 161\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.96080482006073,\n    \"word\": \"iso\",\n    \"start\": 162,\n    \"end\": 165\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.756461501121521,\n    \"word\": \"f\",\n    \"start\": 166,\n    \"end\": 167\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9956886768341064,\n    \"word\": \"spo\",\n    \"start\": 168,\n    \"end\": 171\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9743632078170776,\n    \"word\": \"2 m\",\n    \"start\": 173,\n    \"end\": 176\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9773945808410645,\n    \"word\": \"a\",\n    \"start\": 177,\n    \"end\": 178\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9040278196334839,\n    \"word\": \"e\",\n    \"start\": 179,\n    \"end\": 180\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9995408058166504,\n    \"word\": \"per\",\n    \"start\": 192,\n    \"end\": 195\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.963502049446106,\n    \"word\": \"##o\",\n    \"start\": 195,\n    \"end\": 196\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9301457405090332,\n    \"word\": \"3 pg\",\n    \"start\": 197,\n    \"end\": 201\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.4287636876106262,\n    \"word\": \"##m\",\n    \"start\": 201,\n    \"end\": 202\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.8326588869094849,\n    \"word\": \"po\",\n    \"start\": 203,\n    \"end\": 205\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9688549637794495,\n    \"word\": \"##xy\",\n    \"start\": 205,\n    \"end\": 207\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.7927781343460083,\n    \"word\": \"##cyelin\",\n    \"start\": 207,\n    \"end\": 213\n  },\n  {\n    \"entity_group\": \"Medication\",\n    \"score\": 0.6142092943191528,\n    \"word\": \"##e\",\n    \"start\": 213,\n    \"end\": 214\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9756526947021484,\n    \"word\": \"lo\",\n    \"start\": 218,\n    \"end\": 220\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.6340898871421814,\n    \"word\": \"##ory\",\n    \"start\": 220,\n    \"end\": 223\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9061903357505798,\n    \"word\": \"6song\",\n    \"start\": 224,\n    \"end\": 229\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9829804301261902,\n    \"word\": \"3 bd6 003\",\n    \"start\": 230,\n    \"end\": 239\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.985482931137085,\n    \"word\": \"6 5 5\",\n    \"start\": 240,\n    \"end\": 245\n  }\n]\n\n==================================================\n         EVALUATION vs. GROUND TRUTH\n==================================================\n\n--- OCR Performance ---\nModel Output: NATIONAL INSTITUTE OF TECHNOLOGY ANDHRA PRADESH - TA DEPALLIGUDEM-534101 MOTHER THERESA HEALTH CENTER 188/25 2 2 Name digyaTokot, Date : 12 108/25 Age: Sex: M BP Iso F SPO2 2 M A E N % cough, Pero 3 PGM Poxycyeline T. loory 6song 3 BD6 003 6 5 5\nGround Truth: T. Doxycycline 100mg BD (6) T. Dolo 650mg BD (6) T. Rantac OD (3) T. Cetirizine OD (5) T. Vit C (5)\n\n--> Text Similarity Score: 18.60%\n\n--- NER Performance ---\nBelow are the entities the model found. Compare them to what you expected from the ground truth.\n[\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.8080636262893677,\n    \"word\": \"national institute of technology\",\n    \"start\": 0,\n    \"end\": 32\n  },\n  {\n    \"entity_group\": \"Nonbiological_location\",\n    \"score\": 0.7293844223022461,\n    \"word\": \"andhra pradesh\",\n    \"start\": 33,\n    \"end\": 47\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.931725800037384,\n    \"word\": \"ta\",\n    \"start\": 50,\n    \"end\": 52\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.8566929697990417,\n    \"word\": \"de\",\n    \"start\": 53,\n    \"end\": 55\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.5049527883529663,\n    \"word\": \"##palligudem\",\n    \"start\": 55,\n    \"end\": 65\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9682647585868835,\n    \"word\": \"534101\",\n    \"start\": 66,\n    \"end\": 72\n  },\n  {\n    \"entity_group\": \"Nonbiological_location\",\n    \"score\": 0.9847940802574158,\n    \"word\": \"mother theresa health center\",\n    \"start\": 73,\n    \"end\": 101\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9449025988578796,\n    \"word\": \"188 / 25\",\n    \"start\": 102,\n    \"end\": 108\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.868102490901947,\n    \"word\": \"2\",\n    \"start\": 109,\n    \"end\": 110\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.7266038060188293,\n    \"word\": \"2\",\n    \"start\": 111,\n    \"end\": 112\n  },\n  {\n    \"entity_group\": \"Date\",\n    \"score\": 0.8544389009475708,\n    \"word\": \"12 108 / 25 age\",\n    \"start\": 137,\n    \"end\": 150\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9980890154838562,\n    \"word\": \"sex\",\n    \"start\": 152,\n    \"end\": 155\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.6652319431304932,\n    \"word\": \"m\",\n    \"start\": 157,\n    \"end\": 158\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9999182224273682,\n    \"word\": \"bp\",\n    \"start\": 159,\n    \"end\": 161\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.96080482006073,\n    \"word\": \"iso\",\n    \"start\": 162,\n    \"end\": 165\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.756461501121521,\n    \"word\": \"f\",\n    \"start\": 166,\n    \"end\": 167\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9956886768341064,\n    \"word\": \"spo\",\n    \"start\": 168,\n    \"end\": 171\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9743632078170776,\n    \"word\": \"2 m\",\n    \"start\": 173,\n    \"end\": 176\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9773945808410645,\n    \"word\": \"a\",\n    \"start\": 177,\n    \"end\": 178\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9040278196334839,\n    \"word\": \"e\",\n    \"start\": 179,\n    \"end\": 180\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9995408058166504,\n    \"word\": \"per\",\n    \"start\": 192,\n    \"end\": 195\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.963502049446106,\n    \"word\": \"##o\",\n    \"start\": 195,\n    \"end\": 196\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9301457405090332,\n    \"word\": \"3 pg\",\n    \"start\": 197,\n    \"end\": 201\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.4287636876106262,\n    \"word\": \"##m\",\n    \"start\": 201,\n    \"end\": 202\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.8326588869094849,\n    \"word\": \"po\",\n    \"start\": 203,\n    \"end\": 205\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9688549637794495,\n    \"word\": \"##xy\",\n    \"start\": 205,\n    \"end\": 207\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.7927781343460083,\n    \"word\": \"##cyelin\",\n    \"start\": 207,\n    \"end\": 213\n  },\n  {\n    \"entity_group\": \"Medication\",\n    \"score\": 0.6142092943191528,\n    \"word\": \"##e\",\n    \"start\": 213,\n    \"end\": 214\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.9756526947021484,\n    \"word\": \"lo\",\n    \"start\": 218,\n    \"end\": 220\n  },\n  {\n    \"entity_group\": \"Diagnostic_procedure\",\n    \"score\": 0.6340898871421814,\n    \"word\": \"##ory\",\n    \"start\": 220,\n    \"end\": 223\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9061903357505798,\n    \"word\": \"6song\",\n    \"start\": 224,\n    \"end\": 229\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.9829804301261902,\n    \"word\": \"3 bd6 003\",\n    \"start\": 230,\n    \"end\": 239\n  },\n  {\n    \"entity_group\": \"Lab_value\",\n    \"score\": 0.985482931137085,\n    \"word\": \"6 5 5\",\n    \"start\": 240,\n    \"end\": 245\n  }\n]\n","output_type":"stream"}],"execution_count":21}]}